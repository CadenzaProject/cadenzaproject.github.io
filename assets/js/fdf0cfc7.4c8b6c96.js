"use strict";(self.webpackChunkcadenza=self.webpackChunkcadenza||[]).push([[102],{93426:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"cadenza1/Software/cc1_additional_tools","title":"Additional tools","description":"The Clarity-Cadenza git include a variety of additional tools.","source":"@site/docs/cadenza1/Software/cc1_additional_tools.md","sourceDirName":"cadenza1/Software","slug":"/cadenza1/Software/cc1_additional_tools","permalink":"/docs/cadenza1/Software/cc1_additional_tools","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6.4,"frontMatter":{"id":"cc1_additional_tools","title":"Additional tools","sidebar_label":"Additional tools","sidebar_position":6.4},"sidebar":"tutorialSidebar_cad1","previous":{"title":"Core Software","permalink":"/docs/cadenza1/Software/cc1_core_software"}}');var o=a(74848),s=a(28453);const i={id:"cc1_additional_tools",title:"Additional tools",sidebar_label:"Additional tools",sidebar_position:6.4},r=void 0,c={},d=[{value:"1. Car noise generator",id:"1-car-noise-generator",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.a,{href:"https://github.com/claritychallenge/clarity",children:"Clarity-Cadenza git"})," include a variety of additional tools.\nThese include hearing loss simulation, a range of objective measures and standard hearing aid processors.\nFor more details see the readme on the git."]}),"\n",(0,o.jsx)(t.h2,{id:"1-car-noise-generator",children:"1. Car noise generator"}),"\n",(0,o.jsx)(t.p,{children:"This software generates car noise, using the car speed as input. This is provided so that entrants can generate the car noise\nfor the evaluation stage. You are allow to generate different noises to learn the spectrum characteristics of the noises\ngiven the speed. However, entrants cannot use the car noise signal itself to perform noise cancellation, only the metadata (e.g. car speed)."}),"\n",(0,o.jsx)(t.p,{children:"The model is split into two parts."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"carnoise_parameters_generator.py"})," - This class generates random parameters given a car speed and return them as a dictionary."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"carnoise_signal_generator.py"})," - This class takes a dictionary as input and generates the expected noise."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"For details of how to use these classes, refer to the docstrings in the classes."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>r});var n=a(96540);const o={},s=n.createContext(o);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);